using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace iGEM2017
{
    class Damerau_Levenshtein
    {
        static void Main(string[] args)
        {   
            Console.WriteLine("READING FROM FILE 1 ");
            string a = File.ReadAllText(@"C:\Users\edpkp\Documents\Visual Studio 2015\Projects\iGEM2017\iGEM2017\bin\Debug\First_Analysis.txt");
            Console.WriteLine("READING FROM FILE 2 ");
            string b = File.ReadAllText(@"C:\Users\edpkp\Documents\Visual Studio 2015\Projects\iGEM2017\iGEM2017\bin\Debug\Second_Analysis.txt");
            Console.WriteLine("Distance between FILE 1 and FILE 2:" + Damerau_Levenshtein_Alg(a, b));

            Console.WriteLine("Do you wish to view the files? (Debugging) PRESS Y TO WORK IT ");
            string zx = Console.ReadLine();
            if (zx == "Y")
            {
                Console.WriteLine("FILE 1 SAYS: \n " + a);
                Console.WriteLine("FILE 2 SAYS: \n " + b);
            }
            else
            {
                Console.WriteLine("Yeah, me neither");
            }
            Console.ReadLine();
        }

        public static int Damerau_Levenshtein_Alg(string original, string modified)
        {
            //TAKEN FROM WIKIPEDIA https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance
            int len_orig = original.Length;
            int len_diff = modified.Length;

            var matrix = new int[len_orig + 1, len_diff + 1];
            for (int i = 0; i <= len_orig; i++)
                matrix[i, 0] = i;
            for (int j = 0; j <= len_diff; j++)
                matrix[0, j] = j;

            for (int i = 1; i <= len_orig; i++)
            {
                for (int j = 1; j <= len_diff; j++)
                {
                    int cost = modified[j - 1] == original[i - 1] ? 0 : 1;
                    var vals = new int[] {
                matrix[i - 1, j] + 1,
                matrix[i, j - 1] + 1,
                matrix[i - 1, j - 1] + cost
            };
                    matrix[i, j] = vals.Min();
                    if (i > 1 && j > 1 && original[i - 1] == modified[j - 2] && original[i - 2] == modified[j - 1])
                        matrix[i, j] = Math.Min(matrix[i, j], matrix[i - 2, j - 2] + cost);
                }
            }
            return matrix[len_orig, len_diff];
        }

    }
}
